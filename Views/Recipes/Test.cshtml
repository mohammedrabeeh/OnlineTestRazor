
@model PaginatedList<WebApplication1.Models.ViewModels.NewRecipeVMSam>
@{
    ViewData["Title"] = "Index";
}

<h1>Test</h1>

<form asp-action="Test" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Test">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Test" asp-route-sortOrder="@ViewData["IDSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Recipe ID</a>
            </th>
            <th>
                <a asp-action="Test" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Recipe Title</a>
            </th>
            <th>
                <a asp-action="Test" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Date Added</a>
            </th>
            <th>
                Steps
            </th>

            <th>
                Ingredient
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.RecipeId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RecipeTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateAdded)
                </td>
                <td>
                    @foreach (var step in item.Steps)
                    {
                        @Html.DisplayFor(modelItem => step.StepName)<br />
                    }
                </td>

                <td>
                    @foreach (var ingr in item.Ingredient)
                    {
                        @Html.DisplayFor(modelItem => ingr.IngredientName)<br />
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Test"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Test"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>